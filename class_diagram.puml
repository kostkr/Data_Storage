@startuml
class CLI {
    -GraphManager& graphManager
    -CommandManager& commandManager
    +CLI(GraphManager& graphManager, CommandManager& commandManager)
    +void run()
}

CLI -> GraphManager
CLI --> CommandManager

class CommandManager {
    - std::map<std::string, std::function<Command*()>> commandMap
    + void registryCommand(std::string name, std::function<Command*()> command)
    + void executeCommand(std::string commandName)
}

class Command {
    + void execute()
}

class InitGraphCommand{
    + void execute()
}

class AddNodeCommand{
    + void execute()
}

class AddEdgeCommand{
    + void execute()
}

class DeleteNodeCommand{
    + void execute()
}

class DeleteEdgeCommand{
    + void execute()
}

class DisplayNodeCommand{
    + void execute()
}

class DisplayEdgeCommand{
    + void execute()
}

class DisplayGraphCommand{
    + void execute()
}

InitGraphCommand -> Command
AddNodeCommand -> Command
AddEdgeCommand -> Command
DeleteNodeCommand -> Command
DeleteEdgeCommand -> Command
DisplayNodeCommand -> Command
DisplayEdgeCommand -> Command
DisplayGraphCommand -> Command


class GraphManager {
    map<string, Graph*> graphs
    Graph* currentGraph
    +void createGraph(string graphName)
    +void deleteGraph(string graphName)
    +void switchGraph(string graphName)
    +Graph* getCurrentGraph()
    +void displayGraphs()
}

GraphManager --> "Graph<TNode, TEdge>"

class "Graph<TNode, TEdge>" {
    int id
    string name
    + std::vector<TNode> nodes
    + std::vector<TEdge> edges
    + void addNode(TNode node)
    + void addEdge(TEdge edge)
    + void removeNode(TNode node)
    + void removeEdge(TEdge edge)
    + void displayGraph()
    + Node<TNode>* getNodeById(int NodeId)
    + void addEdgeByNodeId(int sourceNodeId, int targetNodeId, const std::string metadata, double weight = 0.0)
}

class "Node<T>" {
      int id
      T data
    + Node(T data)
    + T getData()
    + void setData(T data)
    + void displayNode()
}

class "Edge<TNode, TEdge>" {
      int id
      Node<TNode> source
      Node<TEdge> destination
      TEdge metadata
      double weight // optional
    + Edge(Node<TNode> source, Node<T> destination, T metadata)
    + Node<TNode> getSource()
    + Node<TNode> getDestination()
    + TEdge getMetadata()
    + void setMetadata(TEdge metadata)
    + void displayEdge()
}

class "GraphRepository" {
    + void serialize(Graph<TNode, TEdge> graph, (std::string fileName))
}

"Graph<TNode, TEdge>" "1" *- "many" "Node<T>"
"Graph<TNode, TEdge>" "1" *- "many" "Edge<TNode, TEdge>"
"Edge<TNode, TEdge>" "many" o-- "1" "Node<T>"

GraphRepository ..> "Graph<TNode, TEdge>"
CLI --> "GraphRepository"

CommandManager "1" *-- "many" "Command"


' patterns:
' 1) Service Layer - The CommandManager acts as a service layer by providing an intermediary between the user interface (CLI) and the core logic (CommandManager). This separation helps to keep the system modular, ensuring that different concerns (CLI, business logic) are managed independently. It allows for easier maintenance and modification of the business logic without affecting the CLI.
' 2) Facade - The CLI class functions as a facade by offering a unified interface for interacting with multiple subsystems such as GraphManager and CommandManager
' 3) Unit of work - The InitGraphCommand encapsulates multiple actions (creating, switching, and displaying graphs) into a single command. This unit of work pattern ensures that related operations are executed together, maintaining consistency and improving the clarity of the command logic.
' 4) Plugin - The Command class with its execute() method is designed to be extended by different command types such as InitGraphCommand, AddNodeCommand, etc. This plugin architecture allows the addition of new commands at runtime without modifying the existing code base, facilitating extensibility and adaptability to changing requirements.
' 5) Repository - The GraphManager class acts as a repository, managing the creation, deletion, and retrieval of graph instances. This encapsulation of data access helps to centralize data management and simplifies interactions with the data, improving maintainability and scalability.
' 6) Metadata Mapping - The Edge class incorporates a weight property, which can be used as metadata for edges between nodes. This feature adds flexibility in representing relationships and can be used to optimize graph traversal or analysis operations based on the edge weights.
' 7) MVC - Graph(model), CommandManager(controller), display methods(view)
' 8) Foreign Key Mapping - The Edge class has a reference to the Node class, establishing a relationship between nodes and edges, similar to how foreign keys work in databases. This design ensures that the system can handle complex graph structures and maintain referential integrity.
' 9) Serialized LOB - he GraphRepository pattern enables the serialization of graph data, allowing it to be saved and shared easily across different applications. This is particularly useful for scenarios where graphs need to be persisted or exchanged between different systems.
' 10) Application Controller - The CLI as an application controller by managing the execution of commands. This centralizes control flow and allows ease centralize and modularize action and view management
' 11) Data Transfer Object - The GraphRepository acts as a Data Transfer Object by serializing graphs into files that can be transferred to other systems. This allows the graphs to be shared between applications, improving interoperability and making it easier to use the data in different contexts.
' 12) Registry - The CommandManager implements a registry pattern by allowing new commands to be registered dynamically. This promotes flexibility and ensures that the system can be easily extended with new commands without modifying the core logic.
' 13) Special Case -  The GraphManager class handles special cases such as when no graph is initialized or loaded by the user. This ensures that the system can gracefully handle edge cases and provide appropriate feedback or error handling.
' 14) Factory Method - The CommandManagerâ€™s registerCommand() method acts as a factory that simplifies command registration. By providing a mechanism to dynamically register new commands without altering existing code, this pattern enhances the flexibility and scalability of the system, making it easy to extend with additional functionality.
' 15) Command - Any class that implements the Command interface. This approach allows scripts or actions to be organized into separate classes based on the Command pattern.
' 16) Transaction Script - Any method of Graph class is separate script for a more understandable transformation of the graph data (Node, Edge and metadata).
' 17) Layer SuperType -  A Layer SuperType is a pattern where a common superclass defines shared behaviors across various objects in different layers of an application. In this case, the base Command class can be the supertype, and each specific command inherits shared functionality.
@enduml
